package tecnoplus;
import java.util.Scanner;
import java.time.LocalDate;

public class Inventario {
    // ventasTotales es arreglo debido a que vamos a guardar más de una venta
    static Dispositivo[] inventario = new Dispositivo[100];
    static Venta[] ventasTotales = new Venta[100];
    static LocalDate fechaActual = LocalDate.now();
    static int cantidadDispositivosInventario = 0, cantidadVentas = 0;
    static Scanner sc = new Scanner(System.in);
    
    
    // -----------------------------Relacionado a introd. y registro de productos--------------------------------------------------
    // devolverá un arreglo porque introducen varios dispositivos
    public static Dispositivo[] recibirDispositivos(int cantidad){
        String nombreDispositivo, categoria, codigo;
        float precio, IVA;
        int unidadesDispositivo, umbralMinimo;
        
        System.out.println("¿Cuántos dispositivos desea registrar?");
        cantidad = sc.nextInt();
        
        Dispositivo[] dispositivos = new Dispositivo[cantidad];
        System.out.println();
        
        for(int i = 0; i < cantidad; i++){
            System.out.println("Producto #" + (i + 1));
            
            System.out.println("Introduce el nombre del dispositivo: ");
            sc.nextLine();
            nombreDispositivo = sc.nextLine();
            System.out.println("Introduce la categoría de este: ");
            categoria = sc.nextLine();
            System.out.println("Introduce el precio de este dispositivo: ");
            precio = sc.nextInt();
            System.out.println("Introduce el porcentaje de IVA del dispositivo: ");
            IVA = sc.nextFloat();
            System.out.println("Introduce el código del dispositivo: ");
            sc.nextLine();
            codigo = sc.nextLine();
            System.out.println("Introduce las unidades del dispositivo: ");
            unidadesDispositivo = sc.nextInt();
            
            if(unidadesDispositivo <= 0 || IVA < 0 || precio <= 0){
                System.out.println("Error: No puedes introducir cantidades negativas o iguales a cero.");
                cantidad--;
                i--;
                continue;
            }
            
            System.out.println("Introduce el umbral mínimo para reabastecer el producto: ");
            umbralMinimo = sc.nextInt();
            
            dispositivos[i] = new Dispositivo(nombreDispositivo, categoria, precio, IVA, codigo, unidadesDispositivo, umbralMinimo);
            System.out.println();
        }
        
        return dispositivos;
    }
    
    public static void registrarDispositivosInventario(Dispositivo[] dispositivos){
        // iterar sobre el conjunto de dispositivos

        for(int i = 0; i < dispositivos.length; i++){
            boolean existe = false;
            Dispositivo dispositivoActual = dispositivos[i];

            // iterar sobre el inventario para verificar existencias
            for(int j = 0; j < cantidadDispositivosInventario; j++){
                if(dispositivoActual.nombreDispositivo.toLowerCase().equals(inventario[j].nombreDispositivo.toLowerCase())){
                    inventario[j].unidadesDisponibles += dispositivoActual.unidadesDisponibles;
                    existe = true;
                    break;
                }
            }
            
            // Si no hay existencias de ese prod., se introduce como nuevo
            if(!existe){
                inventario[cantidadDispositivosInventario] = dispositivoActual;
                cantidadDispositivosInventario++;
            }
        }
    }
    
    public static void reabastecerInventario(int cantidadProd){
        int unidadesReabastecer;
        String nombreProd;
        
        System.out.println("¿Cuántos productos vas a reabastecer?");
        cantidadProd = sc.nextInt();
            
        for (int i = 0; i < cantidadProd; i++) {
            boolean prodEncontrado = false;

            System.out.println("¿Qué producto vas a reabastecer?");
            sc.nextLine();
            nombreProd = sc.nextLine();
 
            System.out.println("¿Cuántas unidades vas a introducir?");
            unidadesReabastecer = sc.nextInt();
            
            if(unidadesReabastecer <= 0){
                System.out.println("Error: No puedes introducir cantidades negativas o iguales a cero.");
                continue;
            }

            // Iteramos sobre el arreglo para encontrar el prod., si lo encontramos,
            // le sumamos las unidades
            for (int j = 0; j < cantidadDispositivosInventario; j++) {
                if (nombreProd.toLowerCase().equals(inventario[j].nombreDispositivo.toLowerCase())) {
                    inventario[j].unidadesDisponibles += unidadesReabastecer;
                    prodEncontrado = true;
                    break;
                }
            }
            
            // Si no se encuentra en el inventario, imprimimos un mensaje
            if (!prodEncontrado) {
                System.out.println("Error: Producto no encontrado.");
            }
        }
    }
    
    //---------------------------------Relacionado a las ventas y registro de estas-------------------------------------------------
    public static void registroDeVenta(String nombreDispositivo, float costoVenta) {
        // Booleano para verificar si ya se ha vendido el mismo prod. previamente
        boolean ventaProdExiste = false;
        Venta nuevaVenta = new Venta(nombreDispositivo, costoVenta);

        for (int i = 0; i < cantidadVentas; i++) {
            if (nuevaVenta.nombreProducto.toLowerCase().equals(ventasTotales[i].nombreProducto)) {
                ventasTotales[i].gananciaTotal += nuevaVenta.gananciaTotal;
                ventaProdExiste = true;
                break;
            }
        }

        // si no es así, se hace el registro normal
        if (!ventaProdExiste) {
            ventasTotales[cantidadVentas] = nuevaVenta;
            cantidadVentas++;
        }
    }

    public static void ventaDeDispositivo(int cantidadProductos) {
        String nombreDispositivo;
        int unidadesAComprar;
        // Para mantener el registro del costo total de la venta
        float costoVenta, costoTotal = 0;

        System.out.println("¿Cuántos productos vas a vender?");
        cantidadProductos = sc.nextInt();
        sc.nextLine();
        System.out.println();

        for (int i = 0; i < cantidadProductos; i++) {
            // Se puede controlar de mejor forma la impresión de los mensajes de error
            boolean dispEncontrado = false, estaDisponible = true;
            
            System.out.println("Producto #" + (i + 1));

            System.out.println("Ingresa el nombre del producto: ");
            nombreDispositivo = sc.nextLine();
            System.out.println("Ingresa la cantidad de unidades a comprar: ");
            unidadesAComprar = sc.nextInt();

            if (unidadesAComprar <= 0) {
                System.out.println("Error: No puedes introducir cantidades negativas o iguales a cero.");
                cantidadProductos--;
                i--;
                continue;
            }
            sc.nextLine();

            for (int j = 0; j < cantidadDispositivosInventario; j++) {
                // Se itera en inventario para buscar el dispositivo.
                if (nombreDispositivo.toLowerCase().equals(inventario[j].nombreDispositivo.toLowerCase())) {
                    // Si no hay unid. disponibles, no se podrá realizar la venta
                    if ((inventario[j].unidadesDisponibles == 0) || (unidadesAComprar > inventario[j].unidadesDisponibles)) {
                        estaDisponible = false;
                        break;
                    }

                    inventario[j].unidadesDisponibles -= unidadesAComprar;
                    costoVenta = ((inventario[j].precio_venta * unidadesAComprar) * ((100 + inventario[j].porcentaje_IVA) / 100));
                    costoTotal += costoVenta;

                    registroDeVenta(nombreDispositivo, costoVenta);

                    dispEncontrado = true;
                    break;
                }
            }

            // si no se encuentra, entonces imprimirá un mensaje de inválido
            if (!dispEncontrado) {
                System.out.println();
                System.out.printf("Error: El producto %s no fue encontrado o no se encuentra disponible.%n", nombreDispositivo);
            }

            // Lo mismo por si no está disponible
            if (!estaDisponible) {
                System.out.println();
                System.out.println("Error: No hay unidades disponibles del producto, o la cantidad a pedir excede las unid. actuales");
            }
        }

        if (cantidadVentas > 0) {
            System.out.println();
            System.out.printf("El costo total de esta compra (IVA incluido) es: %.2f%n", costoTotal);
        }
    }
    
    // --------------------------------Imprimir informes e inventario-----------------------------------------------------------------
    public static void imprimirInformeInventario(){
        int contadorTotalProductos = 0;
        
        System.out.printf("%-25s %-20s %-22s %-15s%n", "Nombre del producto", "Código del producto", "Unidades disponibles", "Umbral mínimo");
        System.out.println("-----------------------------------------------------------------------------------");
        
        for(int i = 0; i < cantidadDispositivosInventario; i++){
            Dispositivo dispositivo = inventario[i];
            
            System.out.printf("%-25s %-20s %-22d %-15d%n", dispositivo.nombreDispositivo, dispositivo.codigo, dispositivo.unidadesDisponibles, dispositivo.umbralMinimo);
                
            contadorTotalProductos += dispositivo.unidadesDisponibles;
        }
        
        System.out.println("-----------------------------------------------------------------------------------");
        System.out.printf("Cantidad de productos en total: %d", contadorTotalProductos);
        System.out.println();
        System.out.println();
        
        for(int i = 0; i < cantidadDispositivosInventario; i++){
            Dispositivo dispositivo = inventario[i];
            
            if(dispositivo.unidadesDisponibles == 0){
                System.out.printf("¡Advertencia! El producto \"%s\" tiene 0 unidades disponibles.", dispositivo.nombreDispositivo);
            }
            
            else if(dispositivo.unidadesDisponibles <= dispositivo.umbralMinimo){
                System.out.printf("¡Advertencia! El producto \"%s\" posee %d unidades menores o iguales al umbral mínimo", dispositivo.nombreDispositivo, dispositivo.unidadesDisponibles);
            }
        }
        System.out.println();
    }
    
    public static void imprimirInformeVenta(){
        System.out.printf("Fecha actual: %s%n", fechaActual);
        System.out.printf("%-26s %-30s%n", "Nombre del producto", "Ganancias totales del producto");
        System.out.println("---------------------------------------------------------");
        
        float gananciaTotalInforme = 0;
        for(int i = 0; i < cantidadVentas; i++){
            Venta venta = ventasTotales[i];
            
            gananciaTotalInforme += venta.gananciaTotal;
            System.out.printf("%-26s %-30.2f%n", venta.nombreProducto, venta.gananciaTotal);
        }
        
        System.out.println("---------------------------------------------------------");
        System.out.printf("Ganancias en total: %.2f%n", gananciaTotalInforme);
    }
    
    public static void imprimirListadoInventario(){
        // Imprime el encabezado del listado, para que sea más claro
        System.out.printf("%-20s %-15s %-12s %-10s %-12s %-10s %-10s%n",
                        "Nombre", "Categoría", "Precio", "IVA (%)", "Código", "Unidades", "Umbral");

        System.out.println("--------------------------------------------------------------------------------------------");

        // Imprimir cada fila del inventario
        for (int i = 0; i < cantidadDispositivosInventario; i++){
            Dispositivo dispositivo = inventario[i];

            // Se usan números y signo negativo para aplicar alineado a la derecha o izquierda
            // cierta cant. de espacios
            System.out.printf("%-20s %-15s %-12.2f %-10.2f %-12s %-10d %-10d%n",
                dispositivo.nombreDispositivo, dispositivo.categoria, dispositivo.precio_venta,
                dispositivo.porcentaje_IVA, dispositivo.codigo, dispositivo.unidadesDisponibles,
                dispositivo.umbralMinimo
            );
        }
    }
}
