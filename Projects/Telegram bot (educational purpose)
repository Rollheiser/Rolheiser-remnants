from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

Token_bot: Final = "#Tokenofyourbot"
Bot_username: Final = "#BotsUsername"

# Commands
# Just returns a message for each command of the bot
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("#The message you want the bot to send at the start")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("#The message when user enters help, you can use it to explain other commands")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("#Here displays options of costum")

# Responses
def handle_reponse(text: str) -> str:
    # This responds back to any message of the user
    processed: str = text.lower()
    # The "processed" variable is to do an "if-else" statement if you want to send a message when the user inputs a specific message
    
    return # Message that you want the bot to send

# Send back the message to the user
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # This verifies if the bot is in a group or a private 
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f"User ({update.message.chat.id}) in {message_type}: {text}")

    if message_type == "group":
        if Bot_username in text:
            # We don't want the bot's username included in text, so we replace it
            new_text: str = text.replace(Bot_username, "").strip()
            response: str = handle_reponse(new_text)
        else:
            return
    else:
        response: str = handle_reponse(text)

    print(f"Bot: {response}")
    await update.message.reply_text(response)

# Handling errors
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

if __name__ == "__main__":
    print("Starting bot...")
    app = Application.builder().token(Token_bot).build()

    # Commands
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("custom", custom_command))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Errors
    app.add_error_handler(error)

    # Polls the bot
    print("Polling...")
    app.run_polling(poll_interval=3)
