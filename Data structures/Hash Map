class HashTable:
    # Creates an empty bucket list of given size
    def __init__(self, size):
        self.size = size
        self.hash_table = self.create_buckets()

    def create_buckets(self):
        return [[] for _ in range (self.size)]
    
    def insert_value(self, key, value):
        # Gets the index from the key using hash function
        hashed_key = hash(key) % self.size

        # Get the bucket corresponding to the index
        bucket = self.hash_table[hashed_key]

        found_key = False
        for index, pair in enumerate(bucket):
            # Iterates through the bucket and assigns the key-value pair of the bucket to the variable pair
            key_pair, value_pair = pair

            # Checks if the bucket has the same key as the key to be inserted
            if key_pair == key:
                found_key = True
                break
        # If the bucket has the same key as the key to be inserted, updates the key value
        if found_key:
            bucket[index] = (key, value)
        # Otherwise appends the new key-value pair to the bucket
        else:
            bucket.append((key, value))

    def get_value(self, key):
        hashed_key = hash(key) % self.size

        bucket = self.hash_table[hashed_key]

        found_key = False
        for index, pair in enumerate(bucket):
            key_pair, value_pair = pair

            # Check if the bucket has the same key as the key being searched
            if key_pair == key:
                found_key = True
                break
        # If the bucket has the same key as the key searched, returns the value
        if found_key:
            return value_pair
        # Otherwise, indicate there was no pair found
        else:
            return "Key-value pair not found"
    
    def delete_value(self, key):
        hashed_key = hash(key) % self.size

        bucket = self.hash_table[hashed_key]

        found_key = False
        for index, pair in enumerate(bucket):
            key_pair, value_pair = pair

            # Checf if the bucket has the same key as the key to be deleted
            if key_pair == key:
                found_key = True
                break

        if found_key:
            bucket.pop(index)
        return
    
    # Prints the items of the hash map
    def __str__(self):
        return "".join(str(item) for item in self.hash_table)
