class node:
    def __init__(self, data):
        self.data = data
        self.next = None

class linkedlist:
    def __init__(self):
        self.head = None
        
    def InsertBeginning(self, data):
        new_node = node(data)
        if not self.head:
            self.head = new_node
        else:
            lastnode = self.head
            while lastnode.next:
                lastnode = lastnode.next
            lastnode.next = new_node

    def InsertIndex(self, data, index):
        position = 0
        new_node = node(data)
        current_node = self.head

        if index == position:
            self.InsertBeginning(data)
        else:
            while current_node != None and index != position+1:
                position += 1
                current_node = current_node.next
            
            if current_node != None:
                new_node.next = current_node.next
                current_node.next = new_node
            else:
                print("Index not present")

    def inserAtEnd(self, data):
        new_node = node(data)
        if self.head is None:
            self.head = new_node
            return
        
        current_node = self.head
        while current_node.next:
            current_node = current_node.next
    
        current_node.next = new_node

    def update_node_index(self, val, index):
        current_node = self.head
        position = 0

        if position == index:
            current_node.data = val
        else:
            while current_node != None and position != index:
                position += 1
                current_node = current_node.next

            if current_node != None:
                current_node.data = val
            else:
                print("Index not present")

    def remov_first_node(self):
        if self.head == None:
            return
        
        self.head = self.head.next

    def remov_last_node(self):
        if self.head == None:
            return
        
        current_node = self.head
        while current_node.next.next:
            current_node = current_node.next

        current_node.next = None

    def remov_index_node(self, index):
        current_node = self.head
        position = 0

        if self.head == None:
            return
         
        if position == index:
            self.remov_first_node()
        else:
            while current_node != None and position+1 != index:
                position += 1
                current_node = current_node.next

            if current_node != None:
                current_node.next = current_node.next.next
            else:
                print("Index not present")

    def removeNode(self, data):
        current_node = self.head

        while current_node != None and current_node.next.data != data:
            current_node = current_node.next

        if current_node == None:
            return
        else:
            current_node.next = current_node.next.next

    def reverseLL(self):
        node = self.head
        elements = []
        while node != None:
            elements.append(node.data)
            node = node.next
        elements.reverse()
        return " --> ".join(elements)
        
    def printout(self):
        node = self.head
        elements = []
        while node is not None:
            elements.append(node.data)
            node = node.next
        
        return " --> ".join(elements)
